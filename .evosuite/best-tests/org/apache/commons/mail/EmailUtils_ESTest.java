/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 27 20:37:09 GMT 2023
 */

package org.apache.commons.mail;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.mail.Authenticator;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;
import org.apache.commons.mail.DefaultAuthenticator;
import org.apache.commons.mail.EmailUtils;
import org.apache.maven.model.Model;
import org.apache.maven.model.Organization;
import org.apache.maven.project.DefaultProjectBuilderConfiguration;
import org.apache.maven.project.MavenProject;
import org.apache.maven.settings.RuntimeInfo;
import org.apache.maven.settings.Settings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmailUtils_ESTest extends EmailUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The specified JAR repository doesn't exist or is not a directory: '");
      Random.setNextRandom(41);
      int int0 = 6;
      EmailUtils.randomAlphabetic(6);
      EmailUtils.isEmpty("The specified JAR repository doesn't exist or is not a directory: '");
      Random.setNextRandom((-19));
      EmailUtils.encodeUrl("IIIIII");
      Random.setNextRandom(6);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The specified JAR repository doesn't exist or is not a directory: '");
      EmailUtils.isNotEmpty(".*");
      // Undeclared exception!
      EmailUtils.randomAlphabetic(41);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "z+XEpQ:7Mh[*wp%/)";
      EmailUtils.notNull(object0, "z+XEpQ:7Mh[*wp%/)");
      MockFile mockFile0 = new MockFile((File) null, "z+XEpQ:7Mh[*wp%/)");
      mockFile0.mkdir();
      mockFile0.deleteOnExit();
      mockFile0.setReadOnly();
      MimeMessage mimeMessage0 = null;
      mockFile0.mkdir();
      mockFile0.mkdirs();
      try { 
        EmailUtils.writeMimeMessage(mockFile0, (MimeMessage) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          EmailUtils.encodeUrl("HSg;m)SMX.A@m=");
          String string0 = "";
          EmailUtils.isNotEmpty("");
          String string1 = ";.kJu 69";
          EmailUtils.encodeUrl(";.kJu 69");
          MockFile mockFile0 = new MockFile("HSg%3Bm)SMX.A@m%3D%7F", "x%F/FbDVb0Q&%*[]/");
          MimeMessage mimeMessage0 = new MimeMessage((Session) null);
          String string2 = null;
          mimeMessage0.getAllRecipients();
          mockFile0.setExecutable(false, false);
          mimeMessage0.isMimeType((String) null);
          try { 
            EmailUtils.writeMimeMessage(mockFile0, mimeMessage0);
            fail("Expecting exception: IOException");
          
          } catch(IOException e) {
             //
             // No MimeMessage content
             //
             verifyException("javax.mail.internet.MimePartDataSource", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      EmailUtils.notNull(object0, "");
      EmailUtils.replaceEndOfLineCharactersWithSpaces("");
      EmailUtils.replaceEndOfLineCharactersWithSpaces("");
      EmailUtils.isEmpty("");
      MockFile.createTempFile(" is less than 0.", "", (File) null);
      Properties properties0 = new Properties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator((String) null, (String) null);
      // Undeclared exception!
      try { 
        Session.getDefaultInstance(properties0, (Authenticator) defaultAuthenticator0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Access to default session denied
         //
         verifyException("javax.mail.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmailUtils.replaceEndOfLineCharactersWithSpaces("");
      EmailUtils.isEmpty("");
      EmailUtils.isNotEmpty("");
      EmailUtils.encodeUrl("&vU:[8E^`{W");
      EmailUtils.replaceEndOfLineCharactersWithSpaces("B6");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmailUtils.replaceEndOfLineCharactersWithSpaces(" is less than 0.");
      String string0 = "";
      EmailUtils.isEmpty("");
      EmailUtils.isEmpty("");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.getCanonicalPath();
      mockFile0.setLastModified(381L);
      MimeMessage mimeMessage0 = null;
      // Undeclared exception!
      try { 
        EmailUtils.writeMimeMessage(mockFile0, (MimeMessage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmailUtils.isEmpty("");
      Settings settings0 = new Settings();
      RuntimeInfo runtimeInfo0 = new RuntimeInfo(settings0);
      runtimeInfo0.getFile();
      DefaultProjectBuilderConfiguration defaultProjectBuilderConfiguration0 = new DefaultProjectBuilderConfiguration();
      Properties properties0 = defaultProjectBuilderConfiguration0.getUserProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("", "");
      // Undeclared exception!
      try { 
        Session.getDefaultInstance(properties0, (Authenticator) defaultAuthenticator0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Access to default session denied
         //
         verifyException("javax.mail.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      EmailUtils.randomAlphabetic(77);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = EmailUtils.isEmpty("I7G}");
      assertFalse(boolean0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        EmailUtils.notNull((Object) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.apache.commons.mail.EmailUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = EmailUtils.isEmpty((String) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        EmailUtils.notNull((Object) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.EmailUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = EmailUtils.replaceEndOfLineCharactersWithSpaces("$OAq@'.Wd#w<V^k$V`");
      assertEquals("$OAq@'.Wd#w<V^k$V`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = EmailUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string0 = "US-ASCII";
      boolean boolean1 = EmailUtils.isNotEmpty("US-ASCII");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = EmailUtils.isNotEmpty("US-ASCII");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = EmailUtils.replaceEndOfLineCharactersWithSpaces((String) null);
      assertNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      EmailUtils.notNull(object0, (String) null);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      EmailUtils.notNull(object1, (String) null);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      
      boolean boolean3 = EmailUtils.isEmpty("org.apache.commons.mail.EmailUtils");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = EmailUtils.encodeUrl((String) null);
      assertNull(string2);
      
      boolean boolean4 = EmailUtils.isNotEmpty((String) null);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string3 = EmailUtils.replaceEndOfLineCharactersWithSpaces((String) null);
      assertNull(string3);
      
      // Undeclared exception!
      EmailUtils.randomAlphabetic(123);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmailUtils.randomAlphabetic((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException("org.apache.commons.mail.EmailUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      EmailUtils.notNull("", "org.apache.commons.mail.EmailUtils");
      EmailUtils.encodeUrl("");
      EmailUtils.notNull("", "There was no such logger '");
      EmailUtils.isEmpty("2iEl");
      EmailUtils.encodeUrl("");
      String string1 = "L#Z";
      EmailUtils.replaceEndOfLineCharactersWithSpaces("L#Z");
      EmailUtils.isEmpty("kI5t'd*%T2ca. ");
      EmailUtils.notNull("", "L#Z");
      EmailUtils.isEmpty("");
      EmailUtils.encodeUrl("|+%k,%^ ^=JzG ");
      EmailUtils.replaceEndOfLineCharactersWithSpaces("ML MPM@S!lRvn!O");
      try { 
        MockURL.URL("There was no such logger '", (String) null, "org.apache.commons.mail.EmailUtils");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: there was no such logger '
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      EmailUtils.encodeUrl("");
      Model model0 = new Model();
      MavenProject mavenProject0 = new MavenProject(model0);
      mavenProject0.getFile();
      model0.getOrganization();
      model0.getContributors();
      model0.setOrganization((Organization) null);
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      mimeMessage0.getSize();
      // Undeclared exception!
      try { 
        EmailUtils.writeMimeMessage((File) null, mimeMessage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      EmailUtils.randomAlphabetic(0);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile(":Z_IIK@IcHp!", ":Z_IIK@IcHp!");
      mockFile0.renameTo(file0);
      DefaultProjectBuilderConfiguration defaultProjectBuilderConfiguration0 = new DefaultProjectBuilderConfiguration();
      mockFile0.setWritable(false);
      Properties properties0 = defaultProjectBuilderConfiguration0.getExecutionProperties();
      Session session0 = Session.getInstance(properties0);
      String string0 = "vT.!-{H";
      try { 
        session0.getProvider("vT.!-{H");
        fail("Expecting exception: NoSuchProviderException");
      
      } catch(NoSuchProviderException e) {
         //
         // No provider for vT.!-{H
         //
         verifyException("javax.mail.Session", e);
      }
  }
}
