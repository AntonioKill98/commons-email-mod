/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 27 20:34:45 GMT 2023
 */

package org.apache.commons.mail;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.activation.URLDataSource;
import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailAttachment;
import org.apache.commons.mail.HtmlEmail;
import org.codehaus.classworlds.BytesURLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HtmlEmail_ESTest extends HtmlEmail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((String) null, "LVg?9_%Yq$&S40-)oj");
      try { 
        htmlEmail0.embed((File) mockFile0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // couldn't get canonical path for LVg?9_%Yq$&S40-)oj
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setStartTLSRequired(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("Invalid URL");
      assertFalse(htmlEmail1.isSSLCheckServerIdentity());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setStartTLSEnabled(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("?Mh+\u0000RIJZ");
      assertNull(htmlEmail1.getSubject());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSendPartial(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("34xwK|)IJ[|>N5T$");
      assertEquals(60000, htmlEmail1.getSocketTimeout());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      htmlEmail0.attach(emailAttachment0);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("implementation");
      assertFalse(htmlEmail1.isTLS());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketTimeout((-1));
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("be instantiated. Implementation attribute was not specified in plexus.conf.");
      assertSame(htmlEmail0, htmlEmail1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketConnectionTimeout(0);
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("implementation");
      assertEquals(10, HtmlEmail.CID_LENGTH);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setStartTLSRequired(true);
      Email email0 = htmlEmail0.setMsg("implementation");
      assertEquals(60000, email0.getSocketConnectionTimeout());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setStartTLSEnabled(true);
      HtmlEmail htmlEmail1 = (HtmlEmail)htmlEmail0.setMsg(" disappeared before processing");
      assertNull(htmlEmail1.getSubType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketTimeout(0);
      Email email0 = htmlEmail0.setMsg("text/html");
      assertFalse(email0.isSSLCheckServerIdentity());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketConnectionTimeout(0);
      Email email0 = htmlEmail0.setMsg("couldn't get canonical path for ");
      assertSame(email0, htmlEmail0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setStartTLSRequired(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("obtX0HV!$$I");
      assertNull(htmlEmail1.getBounceAddress());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setStartTLSEnabled(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg(" disappeared before processing");
      assertFalse(htmlEmail1.isSSL());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSendPartial(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("34xwK|)IJ[|>N5T$");
      assertEquals(60000, htmlEmail1.getSocketTimeout());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSSLCheckServerIdentity(true);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("obtX0HV!$$I");
      assertTrue(htmlEmail1.isSSLCheckServerIdentity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      HtmlEmail htmlEmail1 = (HtmlEmail)htmlEmail0.setSSLOnConnect(true);
      HtmlEmail htmlEmail2 = htmlEmail1.setHtmlMsg("5=2Pg_G,I*7OdCzy");
      assertEquals(10, HtmlEmail.CID_LENGTH);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setSocketTimeout((-1));
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("be instantiated. Implementation attribute was not specified in plexus.conf.");
      assertNull(htmlEmail1.getBounceAddress());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URLDataSource uRLDataSource0 = new URLDataSource((URL) null);
      String string0 = htmlEmail0.embed((DataSource) uRLDataSource0, "html", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      FileDataSource fileDataSource0 = new FileDataSource("file name cannot be null or empty");
      String string0 = htmlEmail0.embed((DataSource) fileDataSource0, "file name cannot be null or empty", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = htmlEmail0.embed((DataSource) fileDataSource0, "file name cannot be null or empty");
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getFileExample();
      byte[] byteArray0 = new byte[0];
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      URL uRL1 = MockURL.URL(uRL0, "r^C4", (URLStreamHandler) bytesURLStreamHandler0);
      Random.setNextRandom((-1434));
      String string0 = htmlEmail0.embed(uRL1, "4cxcx?J");
      assertEquals("eeeeeeeeee", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("1BV@bae0GO+1v", "raoNJ$(");
      String string0 = htmlEmail0.embed(file0, "raoNJ$(");
      assertNotNull(string0);
      assertEquals("raoNJ$(", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("name cannot be null or empty", (String) null, (File) null);
      String string0 = htmlEmail0.embed(file0, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.inlineEmbeds = null;
      // Undeclared exception!
      try { 
        htmlEmail0.embed((DataSource) null, "<", "<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      FileDataSource fileDataSource0 = new FileDataSource("!hl's!5DI#2Q8JoXiOM");
      // Undeclared exception!
      htmlEmail0.embed((DataSource) fileDataSource0, "CipSA");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.embed((DataSource) null, "<", "<");
      // Undeclared exception!
      try { 
        htmlEmail0.embed((DataSource) null, "<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.embed((DataSource) null, "couldn't get canonical path for ", "couldn't get canonical path for ");
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler((byte[]) null);
      URL uRL0 = MockURL.URL("`2=?K>Pu", "obtX0HV!$$I", 10, "", (URLStreamHandler) bytesURLStreamHandler0);
      // Undeclared exception!
      try { 
        htmlEmail0.embed(uRL0, "couldn't get canonical path for ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      try { 
        htmlEmail0.embed((URL) null, "'. ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      try { 
        htmlEmail0.embed((File) null, "f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Random.setNextRandom((-2763));
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      try { 
        htmlEmail0.embed((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setInitialized(true);
      // Undeclared exception!
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      try { 
        htmlEmail0.embed((DataSource) null, "", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // name cannot be null or empty
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      MockFile mockFile0 = new MockFile("", "(J#Wu9}^hUnR\"38Y");
      try { 
        htmlEmail0.embed((File) mockFile0, "(J#Wu9}^hUnR\"38Y");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // file /(J#Wu9}^hUnR\"38Y doesn't exist
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LVg?9_%Yq$&S40-)oj");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile((String) null, "LVg?9_%Yq$&S40-)oj");
      htmlEmail0.embed((File) mockFile0, (String) null);
      String string0 = htmlEmail0.embed((File) mockFile0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("implementation");
      EmailAttachment emailAttachment0 = new EmailAttachment();
      htmlEmail1.attach(emailAttachment0);
      HtmlEmail htmlEmail2 = htmlEmail1.setHtmlMsg("obtX0HV!$$I");
      try { 
        htmlEmail2.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      HtmlEmail htmlEmail1 = htmlEmail0.setTextMsg("net.sf.saxon.functions.URIQueryParameters");
      HtmlEmail htmlEmail2 = htmlEmail1.setHtmlMsg("b.0rS.Mu=p~ 4o,fS38");
      try { 
        htmlEmail2.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      htmlEmail0.setTextMsg("net.sf.saxon.functions.URIQueryParameters");
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LVg?9_%Yq$&S40-)oj");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("LVg?9_%Yq$&S40-)oj");
      MockFile mockFile0 = new MockFile((String) null, "LVg?9_%Yq$&S40-)oj");
      htmlEmail1.embed((File) mockFile0, (String) null);
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      HtmlEmail htmlEmail1 = htmlEmail0.setHtmlMsg("b.0rS.Mu=p~ 4o,fS38");
      try { 
        htmlEmail1.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Random.setNextRandom((-2763));
      HtmlEmail htmlEmail0 = new HtmlEmail();
      FileDataSource fileDataSource0 = new FileDataSource("PZ832J_$|,qPAV(d+T6");
      try { 
        htmlEmail0.embed((DataSource) fileDataSource0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // name cannot be null or empty
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      FileDataSource fileDataSource0 = new FileDataSource((File) null);
      htmlEmail0.embed((DataSource) fileDataSource0, ":CqN<]Y'}sD+,}MdF9a", ":CqN<]Y'}sD+,}MdF9a");
      FileDataSource fileDataSource1 = new FileDataSource("<html><body><pre>");
      try { 
        htmlEmail0.embed((DataSource) fileDataSource1, ":CqN<]Y'}sD+,}MdF9a");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // embedded DataSource ':CqN<]Y'}sD+,}MdF9a' is already bound to name javax.activation.FileDataSource@0000000003; existing names cannot be rebound
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      FileDataSource fileDataSource0 = new FileDataSource("file name cannot be null or empty");
      String string0 = htmlEmail0.embed((DataSource) fileDataSource0, "file name cannot be null or empty", "3NR(~pA*");
      assertEquals("3NR(%7EpA*", string0);
      assertNotNull(string0);
      
      String string1 = htmlEmail0.embed((DataSource) fileDataSource0, "file name cannot be null or empty");
      assertNotNull(string1);
      assertEquals("3NR(%7EpA*", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("LVg?9_%Yq$&S40-)oj");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile((String) null, "LVg?9_%Yq$&S40-)oj");
      try { 
        htmlEmail0.embed((File) mockFile0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // file /Users/antonio/Documents/GitHub/commons-email-mod/LVg?9_%Yq$&S40-)oj isn't a normal file
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Random.setNextRandom((-2763));
      HtmlEmail htmlEmail0 = new HtmlEmail();
      MockFile mockFile0 = new MockFile("application/octet-stream", "application/octet-stream");
      try { 
        htmlEmail0.embed((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // file /Users/antonio/Documents/GitHub/commons-email-mod/application/octet-stream/application/octet-stream doesn't exist
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      MockFile mockFile0 = new MockFile("");
      try { 
        htmlEmail0.embed((File) mockFile0, "LVg?9_%Yq$&S40-)oj");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // file name cannot be null or empty
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      byte[] byteArray0 = new byte[6];
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      URL uRL0 = MockURL.URL("'", "nJ1%q:C0QLN\"*GMDldY", 10, "'", (URLStreamHandler) bytesURLStreamHandler0);
      // Undeclared exception!
      htmlEmail0.embed(uRL0, "org.codehaus.classworlds.DefaultClassRealm");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getHttpExample();
      FileDataSource fileDataSource0 = new FileDataSource("34xwK|)IJ[|>N5T$");
      htmlEmail0.embed((DataSource) fileDataSource0, "34xwK|)IJ[|>N5T$", "text/plain");
      // Undeclared exception!
      try { 
        htmlEmail0.embed(uRL0, "34xwK|)IJ[|>N5T$");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.activation.FileDataSource cannot be cast to javax.activation.URLDataSource
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        htmlEmail0.embed(uRL0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // name cannot be null or empty
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        htmlEmail0.embed(uRL0, "34xwK|)IJ[|>N5T$");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid URL
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      try { 
        htmlEmail0.setMsg((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid message supplied
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      try { 
        htmlEmail0.setHtmlMsg("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid message supplied
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      try { 
        htmlEmail0.setTextMsg((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid message supplied
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Random.setNextRandom((-2763));
      HtmlEmail htmlEmail0 = new HtmlEmail();
      File file0 = MockFile.createTempFile("application/octet-stream", "PZ832J_$|,qPAV(d+T6");
      String string0 = htmlEmail0.embed(file0);
      assertNotNull(string0);
      assertEquals("aaaaaaaaaa", string0);
      
      String string1 = htmlEmail0.embed(file0);
      assertNotNull(string1);
      assertEquals("aaaaaaaaaa", string1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Random.setNextRandom((-2763));
      HtmlEmail htmlEmail0 = new HtmlEmail();
      FileDataSource fileDataSource0 = new FileDataSource("PZ832J_$|,qPAV(d+T6");
      htmlEmail0.embed((DataSource) fileDataSource0, "PZ832J_$|,qPAV(d+T6");
      htmlEmail0.setMsg("aaaaaaaaaa");
      try { 
        htmlEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      try { 
        htmlEmail0.embed("\tGnJ", " is not valid");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid URL
         //
         verifyException("org.apache.commons.mail.HtmlEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HtmlEmail htmlEmail0 = new HtmlEmail();
      // Undeclared exception!
      htmlEmail0.embed((File) null);
  }
}
