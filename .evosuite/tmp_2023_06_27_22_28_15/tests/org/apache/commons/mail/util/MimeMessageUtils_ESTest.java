/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 27 20:42:10 GMT 2023
 */

package org.apache.commons.mail.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;
import org.apache.commons.mail.DefaultAuthenticator;
import org.apache.commons.mail.util.MimeMessageUtils;
import org.apache.maven.model.Developer;
import org.apache.maven.model.Model;
import org.apache.maven.settings.Profile;
import org.codehaus.classworlds.BytesURLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MimeMessageUtils_ESTest extends MimeMessageUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      Session session0 = Session.getInstance(properties0);
      byte[] byteArray0 = new byte[5];
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      URL uRL0 = MockURL.URL("org.apache.commons.mail.util.MimeMessageUtils", "", 568, "org.apache.commons.mail.util.MimeMessageUtils", (URLStreamHandler) bytesURLStreamHandler0);
      InputStream inputStream0 = MockURL.openStream(uRL0);
      MimeMessage mimeMessage0 = MimeMessageUtils.createMimeMessage(session0, inputStream0);
      assertNotNull(mimeMessage0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("3SPZYhq%`OU", "3SPZYhq%`OU");
      // Undeclared exception!
      try { 
        MimeMessageUtils.writeMimeMessage((MimeMessage) null, file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Profile profile0 = new Profile();
      Properties properties0 = profile0.getProperties();
      Session session0 = Session.getInstance(properties0);
      // Undeclared exception!
      try { 
        MimeMessageUtils.createMimeMessage(session0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Developer developer0 = new Developer();
      Properties properties0 = developer0.getProperties();
      Session session0 = Session.getInstance(properties0);
      try { 
        MimeMessageUtils.createMimeMessage(session0, (InputStream) null);
        fail("Expecting exception: MessagingException");
      
      } catch(MessagingException e) {
         //
         // Error in input stream
         //
         verifyException("javax.mail.internet.InternetHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("::c$%QJ", "::c$%QJ");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      // Undeclared exception!
      try { 
        MimeMessageUtils.createMimeMessage(session0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("", "(p N\"");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      MockFile mockFile0 = new MockFile((String) null, "org.apache.commons.mail.util.MimeMessageUtils");
      try { 
        MimeMessageUtils.createMimeMessage(session0, (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Properties properties0 = new Properties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("The internal default plexus-bootstrap.xml is missing. This is highly irregular, your plexus JAR is most likely corrupt.", "The internal default plexus-bootstrap.xml is missing. This is highly irregular, your plexus JAR is most likely corrupt.");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2350, 0);
      // Undeclared exception!
      try { 
        MimeMessageUtils.createMimeMessage(session0, (InputStream) byteArrayInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MimeMessage mimeMessage0 = MimeMessageUtils.createMimeMessage((Session) null, byteArray0);
      MockFile mockFile0 = new MockFile("org.codehaus.plexus.lifecycle.UndefinedLifecycleHandlerException", "org.codehaus.plexus.lifecycle.UndefinedLifecycleHandlerException");
      try { 
        MimeMessageUtils.writeMimeMessage(mimeMessage0, mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("3SPZYhq%F`OU");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      MockFile mockFile0 = new MockFile("3SPZYhq%F`OU", "3SPZYhq%F`OU");
      try { 
        MimeMessageUtils.writeMimeMessage((MimeMessage) null, mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("vv*.#}\"]hwW$gcZ", "vv*.#}\"]hwW$gcZ");
      // Undeclared exception!
      try { 
        Session.getDefaultInstance(properties0, (Authenticator) defaultAuthenticator0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Access to default session denied
         //
         verifyException("javax.mail.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Properties properties0 = new Properties();
      MockFile mockFile0 = new MockFile("4Dn(O+EY{J:1g?i");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Session session0 = Session.getInstance(properties0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("4Dn(O+EY{J:1g?i");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        MimeMessageUtils.createMimeMessage(session0, (File) mockFile0);
        fail("Expecting exception: MessagingException");
      
      } catch(MessagingException e) {
         //
         // Error in input stream
         //
         verifyException("javax.mail.internet.InternetHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Properties properties0 = new Properties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("The internal default plexus-bootstrap.xml is missing. This is highly irregular, your plexus JAR is most likely corrupt.", "The internal default plexus-bootstrap.xml is missing. This is highly irregular, your plexus JAR is most likely corrupt.");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      MockFile mockFile0 = new MockFile("frs3lNXXZ91ZBVVF()", "Cy%/:UR");
      File file0 = MockFile.createTempFile("8>@2<", "frs3lNXXZ91ZBVVF()", (File) mockFile0);
      MimeMessage mimeMessage0 = MimeMessageUtils.createMimeMessage(session0, file0);
      assertNotNull(mimeMessage0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Profile profile0 = new Profile();
      Properties properties0 = profile0.getProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("", "");
      // Undeclared exception!
      try { 
        Session.getDefaultInstance(properties0, (Authenticator) defaultAuthenticator0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Access to default session denied
         //
         verifyException("javax.mail.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Developer developer0 = new Developer();
      Properties properties0 = developer0.getProperties();
      Session session0 = Session.getInstance(properties0);
      MimeMessage mimeMessage0 = MimeMessageUtils.createMimeMessage(session0, "@H");
      assertNotNull(mimeMessage0);
  }
}
