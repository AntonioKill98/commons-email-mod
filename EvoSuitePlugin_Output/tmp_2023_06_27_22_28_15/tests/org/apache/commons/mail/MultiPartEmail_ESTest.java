/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 27 20:40:35 GMT 2023
 */

package org.apache.commons.mail;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URL;
import java.net.URLStreamHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.activation.URLDataSource;
import javax.mail.BodyPart;
import javax.mail.internet.MimeMultipart;
import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailAttachment;
import org.apache.commons.mail.MultiPartEmail;
import org.codehaus.classworlds.BytesURLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiPartEmail_ESTest extends MultiPartEmail_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.init();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setMsg("(z/z+Q4N- AFH");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail1.getSubType());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isTLS());
      assertNotNull(multiPartEmail1);
      
      try { 
        multiPartEmail1.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setStartTLSRequired(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSSL());
      assertTrue(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubject());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSendPartial());
      assertNotNull(multiPartEmail1);
      
      MultiPartEmail multiPartEmail2 = (MultiPartEmail)multiPartEmail0.setMsg("pWaCTAgTh[");
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isSSL());
      assertTrue(multiPartEmail2.isStartTLSRequired());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertNull(multiPartEmail2.getSubject());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertNull(multiPartEmail2.getSubType());
      assertFalse(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isTLS());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setStartTLSEnabled(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSSL());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertTrue(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getSubType());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertTrue(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNotNull(multiPartEmail1);
      
      MultiPartEmail multiPartEmail2 = (MultiPartEmail)multiPartEmail0.setMsg("(z/z+Q4N- AFH");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail2.isSSL());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertNull(multiPartEmail2.getSubject());
      assertNull(multiPartEmail2.getSubType());
      assertFalse(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertTrue(multiPartEmail2.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertTrue(multiPartEmail2.isTLS());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSSLCheckServerIdentity(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSendPartial());
      assertTrue(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertNotNull(multiPartEmail1);
      
      MultiPartEmail multiPartEmail2 = (MultiPartEmail)multiPartEmail0.setMsg("pWaCTAgTh[");
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail2.getSubType());
      assertNull(multiPartEmail2.getSubject());
      assertFalse(multiPartEmail2.isTLS());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isBoolHasAttachments());
      assertTrue(multiPartEmail2.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isSSL());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setSocketTimeout(0);
      assertEquals(0, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setMsg("pWaCTAgTh[");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(0, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isTLS());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertEquals(0, multiPartEmail1.getSocketTimeout());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setSocketTimeout((-4368));
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals((-4368), multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setMsg("pWaCTAgTh[");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals((-4368), multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSendPartial());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertEquals((-4368), multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setSocketConnectionTimeout(0);
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(0, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setMsg("pWaCTAgTh[");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(0, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSendPartial());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertEquals(0, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setSocketConnectionTimeout((-1));
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals((-1), multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setMsg("org.codehaus.plexus.logging.AbstractLoggerManager");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals((-1), multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSSL());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertEquals((-1), multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNotNull(multiPartEmail0);
      
      EmailAttachment emailAttachment0 = new EmailAttachment();
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getName());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getDescription());
      assertNotNull(emailAttachment0);
      
      MultiPartEmail multiPartEmail1 = multiPartEmail0.attach(emailAttachment0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getName());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getDescription());
      assertFalse(multiPartEmail1.isSendPartial());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertTrue(multiPartEmail1.isBoolHasAttachments());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isTLS());
      assertNotNull(multiPartEmail1);
      
      boolean boolean0 = multiPartEmail1.isBoolHasAttachments();
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getName());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getDescription());
      assertFalse(multiPartEmail1.isSendPartial());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertTrue(multiPartEmail1.isBoolHasAttachments());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isTLS());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setSubType("n");
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals("n", multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      
      String string0 = multiPartEmail0.getSubType();
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals("n", multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals("n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setSubType("");
      assertEquals("", multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      
      String string0 = multiPartEmail0.getSubType();
      assertEquals("", multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      BodyPart bodyPart0 = multiPartEmail0.createBodyPart();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(bodyPart0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNotNull(multiPartEmail0);
      
      EmailAttachment emailAttachment0 = new EmailAttachment();
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals("", emailAttachment0.getName());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertNotNull(emailAttachment0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setStartTLSRequired(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubject());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isSendPartial());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertTrue(multiPartEmail1.isStartTLSRequired());
      assertNotNull(multiPartEmail1);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach(emailAttachment0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals("", emailAttachment0.getName());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertFalse(multiPartEmail2.isSSL());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertNull(multiPartEmail2.getSubject());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertTrue(multiPartEmail2.isStartTLSRequired());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isSendPartial());
      assertNull(multiPartEmail2.getSubType());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isTLS());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSendPartial(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertTrue(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertTrue(multiPartEmail1.isSendPartial());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNotNull(multiPartEmail1);
      
      EmailAttachment emailAttachment0 = new EmailAttachment();
      assertEquals("", emailAttachment0.getName());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertNotNull(emailAttachment0);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail1.attach(emailAttachment0);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertSame(multiPartEmail1, multiPartEmail2);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertTrue(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubject());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertTrue(multiPartEmail1.isSendPartial());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertTrue(multiPartEmail1.isBoolHasAttachments());
      assertEquals("", emailAttachment0.getName());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertFalse(multiPartEmail2.isSSL());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertNull(multiPartEmail2.getSubject());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isTLS());
      assertTrue(multiPartEmail2.isSendPartial());
      assertNull(multiPartEmail2.getSubType());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSSLCheckServerIdentity(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertTrue(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertNotNull(multiPartEmail1);
      
      EmailAttachment emailAttachment0 = new EmailAttachment();
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getName());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getDescription());
      assertNotNull(emailAttachment0);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach(emailAttachment0);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getName());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertNull(multiPartEmail2.getSubType());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertFalse(multiPartEmail2.isTLS());
      assertTrue(multiPartEmail2.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isSSL());
      assertNull(multiPartEmail2.getSubject());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertNotNull(multiPartEmail0);
      
      EmailAttachment emailAttachment0 = new EmailAttachment();
      assertEquals("", emailAttachment0.getName());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getDescription());
      assertNotNull(emailAttachment0);
      
      multiPartEmail0.setSocketTimeout((byte)0);
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertEquals(0, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      
      MultiPartEmail multiPartEmail1 = multiPartEmail0.attach(emailAttachment0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertEquals(0, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals("", emailAttachment0.getName());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getDescription());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getBounceAddress());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getSubject());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertEquals(0, multiPartEmail1.getSocketTimeout());
      assertTrue(multiPartEmail1.isBoolHasAttachments());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNotNull(multiPartEmail0);
      
      EmailAttachment emailAttachment0 = new EmailAttachment();
      assertEquals("", emailAttachment0.getPath());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals("", emailAttachment0.getName());
      assertNotNull(emailAttachment0);
      
      multiPartEmail0.setSocketTimeout((-3201));
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals((-3201), multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      
      MultiPartEmail multiPartEmail1 = multiPartEmail0.attach(emailAttachment0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals((-3201), multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals("", emailAttachment0.getName());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSSL());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals((-3201), multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubject());
      assertNull(multiPartEmail1.getSubType());
      assertTrue(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isSendPartial());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setSocketConnectionTimeout((-2083));
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertEquals((-2083), multiPartEmail0.getSocketConnectionTimeout());
      
      EmailAttachment emailAttachment0 = new EmailAttachment();
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals("", emailAttachment0.getName());
      assertNotNull(emailAttachment0);
      
      MultiPartEmail multiPartEmail1 = multiPartEmail0.attach(emailAttachment0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertEquals((-2083), multiPartEmail0.getSocketConnectionTimeout());
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals("", emailAttachment0.getName());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals((-2083), multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSL());
      assertTrue(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubType());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSendPartial(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertTrue(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertTrue(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertNotNull(multiPartEmail1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      byte[] byteArray0 = new byte[2];
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(bytesURLStreamHandler0);
      assertEquals(2, byteArray0.length);
      
      URL uRL1 = MockURL.URL(uRL0, "disabled", (URLStreamHandler) bytesURLStreamHandler0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(uRL1);
      assertEquals(2, byteArray0.length);
      
      URLDataSource uRLDataSource0 = new URLDataSource(uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(uRLDataSource0);
      assertEquals(2, byteArray0.length);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach((DataSource) uRLDataSource0, "disabled", "disabled");
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertTrue(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertNull(multiPartEmail2.getSubject());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isSSL());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertTrue(multiPartEmail2.isSendPartial());
      assertNull(multiPartEmail2.getSubType());
      assertFalse(multiPartEmail2.isTLS());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertNull(multiPartEmail2.getBounceAddress());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(multiPartEmail2);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      byte[] byteArray0 = new byte[7];
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bytesURLStreamHandler0);
      assertEquals(7, byteArray0.length);
      
      URL uRL0 = MockURL.URL("attachment", "attachment", 0, ", role-hint: '", (URLStreamHandler) bytesURLStreamHandler0);
      assertEquals("attachment://attachment:0, role-hint: '", uRL0.toString());
      assertEquals("attachment", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("attachment:0", uRL0.getAuthority());
      assertEquals("attachment", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(", role-hint: '", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(", role-hint: '", uRL0.getPath());
      assertEquals("attachment://attachment:0, role-hint: '", uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uRL0);
      assertEquals(7, byteArray0.length);
      
      MultiPartEmail multiPartEmail1 = multiPartEmail0.attach(uRL0, "attachment", "attachment", (String) null);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals("attachment://attachment:0, role-hint: '", uRL0.toString());
      assertEquals("attachment", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("attachment:0", uRL0.getAuthority());
      assertEquals("attachment", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(", role-hint: '", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(", role-hint: '", uRL0.getPath());
      assertEquals("attachment://attachment:0, role-hint: '", uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSendPartial());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isTLS());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertTrue(multiPartEmail1.isBoolHasAttachments());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(multiPartEmail1);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      byte[] byteArray0 = new byte[6];
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setStartTLSRequired(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertTrue(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertNotNull(multiPartEmail1);
      
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bytesURLStreamHandler0);
      assertEquals(6, byteArray0.length);
      
      URL uRL0 = MockURL.URL("n", "n", 0, "n", (URLStreamHandler) bytesURLStreamHandler0);
      assertEquals("n", uRL0.getHost());
      assertEquals("n", uRL0.getFile());
      assertEquals("n://n:0n", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("n", uRL0.getProtocol());
      assertEquals("n:0", uRL0.getAuthority());
      assertEquals("n", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("n://n:0n", uRL0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uRL0);
      assertEquals(6, byteArray0.length);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach(uRL0, "n", "n");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals("n", uRL0.getHost());
      assertEquals("n", uRL0.getFile());
      assertEquals("n://n:0n", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("n", uRL0.getProtocol());
      assertEquals("n:0", uRL0.getAuthority());
      assertEquals("n", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("n://n:0n", uRL0.toString());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isSSL());
      assertTrue(multiPartEmail2.isStartTLSRequired());
      assertNull(multiPartEmail2.getSubType());
      assertNull(multiPartEmail2.getSubject());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertFalse(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isTLS());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(multiPartEmail2);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertNotNull(multiPartEmail0);
      
      byte[] byteArray0 = new byte[0];
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bytesURLStreamHandler0);
      assertEquals(0, byteArray0.length);
      
      URL uRL0 = MockURL.URL("inline", (String) null, (-239), "inline", (URLStreamHandler) bytesURLStreamHandler0);
      assertNull(uRL0.getRef());
      assertEquals("inline", uRL0.getPath());
      assertEquals("inline:inline", uRL0.toExternalForm());
      assertEquals("inline", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("inline", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("inline:inline", uRL0.toString());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(uRL0);
      assertEquals(0, byteArray0.length);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setStartTLSEnabled(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getBounceAddress());
      assertTrue(multiPartEmail0.isStartTLSEnabled());
      assertTrue(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertTrue(multiPartEmail1.isStartTLSEnabled());
      assertTrue(multiPartEmail1.isTLS());
      assertNotNull(multiPartEmail1);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach(uRL0, "inline", "org.codehaus.classworlds.ClassWorld");
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getBounceAddress());
      assertTrue(multiPartEmail0.isStartTLSEnabled());
      assertTrue(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertNull(uRL0.getRef());
      assertEquals("inline", uRL0.getPath());
      assertEquals("inline:inline", uRL0.toExternalForm());
      assertEquals("inline", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("inline", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("inline:inline", uRL0.toString());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(multiPartEmail2.getSubType());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertTrue(multiPartEmail2.isTLS());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertTrue(multiPartEmail2.isStartTLSEnabled());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertNull(multiPartEmail2.getBounceAddress());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertNull(multiPartEmail2.getSubject());
      assertFalse(multiPartEmail2.isSSL());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(multiPartEmail2);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNotNull(multiPartEmail0);
      
      byte[] byteArray0 = new byte[6];
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSendPartial(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getBounceAddress());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertTrue(multiPartEmail1.isSendPartial());
      assertNotNull(multiPartEmail1);
      
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bytesURLStreamHandler0);
      assertEquals(6, byteArray0.length);
      
      URL uRL0 = MockURL.URL("n", "n", 0, "n", (URLStreamHandler) bytesURLStreamHandler0);
      assertEquals("n", uRL0.getHost());
      assertEquals("n://n:0n", uRL0.toExternalForm());
      assertEquals("n", uRL0.getFile());
      assertEquals("n", uRL0.getProtocol());
      assertEquals("n:0", uRL0.getAuthority());
      assertEquals("n", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("n://n:0n", uRL0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uRL0);
      assertEquals(6, byteArray0.length);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach(uRL0, "n", "n");
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertTrue(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertEquals("n", uRL0.getHost());
      assertEquals("n://n:0n", uRL0.toExternalForm());
      assertEquals("n", uRL0.getFile());
      assertEquals("n", uRL0.getProtocol());
      assertEquals("n:0", uRL0.getAuthority());
      assertEquals("n", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("n://n:0n", uRL0.toString());
      assertNull(multiPartEmail2.getSubject());
      assertTrue(multiPartEmail2.isSendPartial());
      assertNull(multiPartEmail2.getSubType());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isTLS());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail2.isSSL());
      assertNull(multiPartEmail2.getBounceAddress());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(multiPartEmail2);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNotNull(multiPartEmail0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      byte[] byteArray0 = new byte[2];
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(bytesURLStreamHandler0);
      assertEquals(2, byteArray0.length);
      
      URL uRL1 = MockURL.URL(uRL0, "disabled", (URLStreamHandler) bytesURLStreamHandler0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(uRL1);
      assertEquals(2, byteArray0.length);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSSLCheckServerIdentity(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertTrue(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubType());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNotNull(multiPartEmail1);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach(uRL1, "H@EV/Zh?>aVV!l{9", "disabled");
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/disabled", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(multiPartEmail2.getBounceAddress());
      assertTrue(multiPartEmail2.isSSLCheckServerIdentity());
      assertNull(multiPartEmail2.getSubject());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isSSL());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertFalse(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isTLS());
      assertNull(multiPartEmail2.getSubType());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(multiPartEmail2);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNotNull(multiPartEmail0);
      
      byte[] byteArray0 = new byte[6];
      multiPartEmail0.socketTimeout = (int) (byte)0;
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(0, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bytesURLStreamHandler0);
      assertEquals(6, byteArray0.length);
      
      URL uRL0 = MockURL.URL("n", "n", 0, "n", (URLStreamHandler) bytesURLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertEquals("n://n:0n", uRL0.toExternalForm());
      assertEquals("n", uRL0.getFile());
      assertEquals("n", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("n:0", uRL0.getAuthority());
      assertEquals("n", uRL0.getPath());
      assertEquals("n", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("n://n:0n", uRL0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uRL0);
      assertEquals(6, byteArray0.length);
      
      MultiPartEmail multiPartEmail1 = multiPartEmail0.attach(uRL0, "n", "n");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(0, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(uRL0.getQuery());
      assertEquals("n://n:0n", uRL0.toExternalForm());
      assertEquals("n", uRL0.getFile());
      assertEquals("n", uRL0.getHost());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("n:0", uRL0.getAuthority());
      assertEquals("n", uRL0.getPath());
      assertEquals("n", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("n://n:0n", uRL0.toString());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSL());
      assertTrue(multiPartEmail1.isBoolHasAttachments());
      assertEquals(0, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isSendPartial());
      assertNull(multiPartEmail1.getBounceAddress());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(multiPartEmail1);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getSubject());
      assertNotNull(multiPartEmail0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Invalid URL set:/@s$5_,|<3");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "@s$5_,|<3");
      assertTrue(boolean0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setStartTLSRequired(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSendPartial());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertTrue(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSL());
      assertNotNull(multiPartEmail1);
      
      MockFile mockFile0 = new MockFile("Invalid URL set:", "@s$5_,|<3");
      assertNotNull(mockFile0);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach((File) mockFile0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getSubject());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("@s$5_,|<3", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/Users/antonio/Documents/GitHub/commons-email-mod/Invalid URL set:", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(9L, mockFile0.length());
      assertEquals("/Users/antonio/Documents/GitHub/commons-email-mod/Invalid URL set:/@s$5_,|<3", mockFile0.toString());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertNull(multiPartEmail2.getSubType());
      assertFalse(multiPartEmail2.isSSL());
      assertNull(multiPartEmail2.getSubject());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertFalse(multiPartEmail2.isSendPartial());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isTLS());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertTrue(multiPartEmail2.isStartTLSRequired());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNotNull(multiPartEmail0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Invalid URL set:/@s$5_,|<3");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "@s$5_,|<3");
      assertTrue(boolean0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSSLCheckServerIdentity(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNull(multiPartEmail1.getSubject());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSL());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertTrue(multiPartEmail1.isSSLCheckServerIdentity());
      assertNotNull(multiPartEmail1);
      
      MockFile mockFile0 = new MockFile("Invalid URL set:", "@s$5_,|<3");
      assertNotNull(mockFile0);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach((File) mockFile0);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals("@s$5_,|<3", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(9L, mockFile0.length());
      assertEquals("/Users/antonio/Documents/GitHub/commons-email-mod/Invalid URL set:/@s$5_,|<3", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Users/antonio/Documents/GitHub/commons-email-mod/Invalid URL set:", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertNull(multiPartEmail2.getSubject());
      assertFalse(multiPartEmail2.isSSL());
      assertFalse(multiPartEmail2.isSendPartial());
      assertTrue(multiPartEmail2.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isTLS());
      assertNull(multiPartEmail2.getSubType());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertNotNull(multiPartEmail0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Invalid URL set:/@s$5_,|<3");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "@s$5_,|<3");
      assertTrue(boolean0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSSLOnConnect(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertTrue(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail1.getSubject());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertTrue(multiPartEmail1.isSSL());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertTrue(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNotNull(multiPartEmail1);
      
      MockFile mockFile0 = new MockFile("Invalid URL set:", "@s$5_,|<3");
      assertNotNull(mockFile0);
      
      MultiPartEmail multiPartEmail2 = multiPartEmail0.attach((File) mockFile0);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertTrue(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertTrue(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("@s$5_,|<3", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(9L, mockFile0.length());
      assertEquals("/Users/antonio/Documents/GitHub/commons-email-mod/Invalid URL set:/@s$5_,|<3", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Users/antonio/Documents/GitHub/commons-email-mod/Invalid URL set:", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertNull(multiPartEmail2.getBounceAddress());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertTrue(multiPartEmail2.isSSLOnConnect());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertNull(multiPartEmail2.getSubType());
      assertTrue(multiPartEmail2.isBoolHasAttachments());
      assertNull(multiPartEmail2.getSubject());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isTLS());
      assertFalse(multiPartEmail2.isSendPartial());
      assertTrue(multiPartEmail2.isSSL());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNotNull(multiPartEmail0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Invalid URL set:/@s$5_,|<3");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "@s$5_,|<3");
      assertTrue(boolean0);
      
      multiPartEmail0.setSocketTimeout(0);
      assertEquals(0, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      
      MockFile mockFile0 = new MockFile("Invalid URL set:", "@s$5_,|<3");
      assertNotNull(mockFile0);
      
      MultiPartEmail multiPartEmail1 = multiPartEmail0.attach((File) mockFile0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(0, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSendPartial());
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertEquals("/Users/antonio/Documents/GitHub/commons-email-mod/Invalid URL set:", mockFile0.getParent());
      assertEquals("@s$5_,|<3", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(9L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/Users/antonio/Documents/GitHub/commons-email-mod/Invalid URL set:/@s$5_,|<3", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSendPartial());
      assertTrue(multiPartEmail1.isBoolHasAttachments());
      assertEquals(0, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSSL());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNotNull(multiPartEmail0);
      
      MimeMultipart mimeMultipart0 = multiPartEmail0.createMimeMultipart();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNotNull(mimeMultipart0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.addPart(mimeMultipart0, 0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSL());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setStartTLSRequired(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getBounceAddress());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertTrue(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSendPartial());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertNotNull(multiPartEmail1);
      
      MimeMultipart mimeMultipart0 = multiPartEmail1.getContainer();
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getBounceAddress());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertTrue(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSendPartial());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertNotNull(mimeMultipart0);
      
      MultiPartEmail multiPartEmail2 = (MultiPartEmail)multiPartEmail1.addPart(mimeMultipart0);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail2);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertTrue(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getBounceAddress());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertTrue(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSendPartial());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail2.isTLS());
      assertFalse(multiPartEmail2.isSendPartial());
      assertNull(multiPartEmail2.getSubject());
      assertNull(multiPartEmail2.getSubType());
      assertFalse(multiPartEmail2.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertTrue(multiPartEmail2.isStartTLSRequired());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isSSL());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSSLCheckServerIdentity(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertTrue(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertNull(multiPartEmail1.getSubject());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSL());
      assertNotNull(multiPartEmail1);
      
      MimeMultipart mimeMultipart0 = multiPartEmail0.getContainer();
      assertSame(multiPartEmail0, multiPartEmail1);
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(mimeMultipart0);
      
      MultiPartEmail multiPartEmail2 = (MultiPartEmail)multiPartEmail1.addPart(mimeMultipart0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail1, multiPartEmail2);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertTrue(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertNull(multiPartEmail1.getSubject());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSL());
      assertTrue(multiPartEmail2.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isSSL());
      assertNull(multiPartEmail2.getSubject());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertNull(multiPartEmail2.getSubType());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertFalse(multiPartEmail2.isTLS());
      assertFalse(multiPartEmail2.isBoolHasAttachments());
      assertNull(multiPartEmail2.getBounceAddress());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNotNull(multiPartEmail0);
      
      MimeMultipart mimeMultipart0 = multiPartEmail0.getContainer();
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNotNull(mimeMultipart0);
      
      multiPartEmail0.socketTimeout = (-257);
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubType());
      assertEquals((-257), multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.addPart(mimeMultipart0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubType());
      assertEquals((-257), multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSL());
      assertEquals((-257), multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isTLS());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setSocketConnectionTimeout((-1));
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals((-1), multiPartEmail0.getSocketConnectionTimeout());
      
      MimeMultipart mimeMultipart0 = new MimeMultipart("");
      assertNotNull(mimeMultipart0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.addPart(mimeMultipart0);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals((-1), multiPartEmail0.getSocketConnectionTimeout());
      assertEquals((-1), multiPartEmail1.getSocketConnectionTimeout());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertNull(multiPartEmail1.getSubject());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setStartTLSEnabled(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertTrue(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isSSL());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertTrue(multiPartEmail1.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubType());
      assertTrue(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNotNull(multiPartEmail1);
      
      MultiPartEmail multiPartEmail2 = (MultiPartEmail)multiPartEmail0.addPart("(z/z+Q4N- AFH", "(z/z+Q4N- AFH");
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertTrue(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubType());
      assertTrue(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertNull(multiPartEmail2.getSubject());
      assertFalse(multiPartEmail2.isSSL());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertTrue(multiPartEmail2.isTLS());
      assertNull(multiPartEmail2.getSubType());
      assertTrue(multiPartEmail2.isStartTLSEnabled());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSendPartial(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertTrue(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSL());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertTrue(multiPartEmail1.isSendPartial());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getBounceAddress());
      assertNotNull(multiPartEmail1);
      
      MultiPartEmail multiPartEmail2 = (MultiPartEmail)multiPartEmail1.addPart("n", "T");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertSame(multiPartEmail1, multiPartEmail2);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertTrue(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSSL());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertTrue(multiPartEmail1.isSendPartial());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertFalse(multiPartEmail2.isSSL());
      assertNull(multiPartEmail2.getSubject());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isSSLCheckServerIdentity());
      assertNull(multiPartEmail2.getSubType());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertTrue(multiPartEmail2.isSendPartial());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertFalse(multiPartEmail2.isBoolHasAttachments());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isTLS());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.setSSLCheckServerIdentity(true);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertFalse(multiPartEmail1.isSendPartial());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail1.getSocketConnectionTimeout());
      assertFalse(multiPartEmail1.isTLS());
      assertNull(multiPartEmail1.getBounceAddress());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertTrue(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSSL());
      assertNull(multiPartEmail1.getSubject());
      assertNotNull(multiPartEmail1);
      
      MultiPartEmail multiPartEmail2 = (MultiPartEmail)multiPartEmail0.addPart("Plain text", "");
      assertSame(multiPartEmail0, multiPartEmail2);
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail1);
      assertSame(multiPartEmail2, multiPartEmail0);
      assertTrue(multiPartEmail0.isSSLCheckServerIdentity());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getBounceAddress());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail2.getSubType());
      assertNull(multiPartEmail2.getSubject());
      assertFalse(multiPartEmail2.isSSLOnConnect());
      assertFalse(multiPartEmail2.isStartTLSRequired());
      assertEquals(60000, multiPartEmail2.getSocketTimeout());
      assertNull(multiPartEmail2.getBounceAddress());
      assertFalse(multiPartEmail2.isSSL());
      assertEquals(60000, multiPartEmail2.getSocketConnectionTimeout());
      assertFalse(multiPartEmail2.isBoolHasAttachments());
      assertFalse(multiPartEmail2.isTLS());
      assertTrue(multiPartEmail2.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail2.isStartTLSEnabled());
      assertFalse(multiPartEmail2.isSendPartial());
      assertNotNull(multiPartEmail2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setSocketConnectionTimeout(0);
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(0, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      
      MultiPartEmail multiPartEmail1 = (MultiPartEmail)multiPartEmail0.addPart("eaq", "pWaCTAgTh[");
      assertSame(multiPartEmail0, multiPartEmail1);
      assertSame(multiPartEmail1, multiPartEmail0);
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(0, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail1.isStartTLSRequired());
      assertNull(multiPartEmail1.getSubject());
      assertFalse(multiPartEmail1.isStartTLSEnabled());
      assertFalse(multiPartEmail1.isSendPartial());
      assertNull(multiPartEmail1.getSubType());
      assertFalse(multiPartEmail1.isBoolHasAttachments());
      assertFalse(multiPartEmail1.isTLS());
      assertFalse(multiPartEmail1.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail1.isSSL());
      assertNull(multiPartEmail1.getBounceAddress());
      assertEquals(60000, multiPartEmail1.getSocketTimeout());
      assertFalse(multiPartEmail1.isSSLOnConnect());
      assertEquals(0, multiPartEmail1.getSocketConnectionTimeout());
      assertNotNull(multiPartEmail1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setInitialized(true);
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      
      // Undeclared exception!
      try { 
        multiPartEmail0.setMsg("org.codehaus.plexus.logging.AbstractLoggerManager");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertNotNull(multiPartEmail0);
      
      multiPartEmail0.setInitialized(true);
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      
      EmailAttachment emailAttachment0 = new EmailAttachment();
      assertEquals("attachment", emailAttachment0.getDisposition());
      assertEquals("", emailAttachment0.getDescription());
      assertEquals("", emailAttachment0.getPath());
      assertEquals("", emailAttachment0.getName());
      assertNotNull(emailAttachment0);
      
      // Undeclared exception!
      try { 
        multiPartEmail0.attach(emailAttachment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubType());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isTLS());
      assertNotNull(multiPartEmail0);
      
      FileDataSource fileDataSource0 = new FileDataSource((File) null);
      assertNotNull(fileDataSource0);
      
      try { 
        multiPartEmail0.attach((DataSource) fileDataSource0, "Core component: '", "YUTO:y", "YUTO:y");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // javax.mail.internet.ParseException: In parameter list <:y>, expected ';', got \":\"
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNotNull(multiPartEmail0);
      
      FileDataSource fileDataSource0 = new FileDataSource((File) null);
      assertNotNull(fileDataSource0);
      
      // Undeclared exception!
      try { 
        multiPartEmail0.attach((DataSource) fileDataSource0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name can't be null
         //
         verifyException("java.io.FilePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertNull(multiPartEmail0.getSubType());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isSSL());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertNotNull(multiPartEmail0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        multiPartEmail0.attach(uRL0, "<EW\"z:E/Q", "<EW\"z:E/Q", "<EW\"z:E/Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNotNull(multiPartEmail0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      try { 
        multiPartEmail0.attach(uRL0, "", ">v:X8-[D,cnQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid URL set:http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNotNull(multiPartEmail0);
      
      // Undeclared exception!
      try { 
        multiPartEmail0.attach((URL) null, "inline", "attachment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSL());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSendPartial());
      assertFalse(multiPartEmail0.isTLS());
      assertNull(multiPartEmail0.getSubject());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertNotNull(multiPartEmail0);
      
      // Undeclared exception!
      try { 
        multiPartEmail0.attach((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertNotNull(multiPartEmail0);
      
      // Undeclared exception!
      try { 
        multiPartEmail0.addPart((MimeMultipart) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.mail.internet.MimeBodyPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      assertNull(multiPartEmail0.getSubject());
      assertNull(multiPartEmail0.getSubType());
      assertFalse(multiPartEmail0.isTLS());
      assertFalse(multiPartEmail0.isStartTLSEnabled());
      assertFalse(multiPartEmail0.isSendPartial());
      assertEquals(60000, multiPartEmail0.getSocketConnectionTimeout());
      assertFalse(multiPartEmail0.isBoolHasAttachments());
      assertFalse(multiPartEmail0.isStartTLSRequired());
      assertFalse(multiPartEmail0.isSSLOnConnect());
      assertFalse(multiPartEmail0.isSSL());
      assertNull(multiPartEmail0.getBounceAddress());
      assertEquals(60000, multiPartEmail0.getSocketTimeout());
      assertFalse(multiPartEmail0.isSSLCheckServerIdentity());
      assertNotNull(multiPartEmail0);
      
      // Undeclared exception!
      try { 
        multiPartEmail0.addPart((MimeMultipart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.mail.internet.MimeBodyPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      Email email0 = multiPartEmail0.setMsg("(z/z+Q4N- AFH");
      Email email1 = email0.setMsg("pWaCTAgTh[");
      assertNull(email1.getSubject());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      multiPartEmail0.attach(emailAttachment0);
      multiPartEmail0.getPrimaryBodyPart();
      assertTrue(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      URLDataSource uRLDataSource0 = new URLDataSource((URL) null);
      // Undeclared exception!
      try { 
        multiPartEmail0.attach((DataSource) uRLDataSource0, "", "yz`{3>?>J", "?#)HKS##k %JtY(Gv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.activation.URLDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      MultiPartEmail multiPartEmail1 = multiPartEmail0.attach((DataSource) null, "*rS6", "?y", "*rS6");
      boolean boolean0 = multiPartEmail1.isInitialized();
      assertTrue(multiPartEmail0.isBoolHasAttachments());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        multiPartEmail0.attach(uRL0, "inline", "attachment", "N \"bm+FF");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid URL set:http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setBoolHasAttachments(true);
      assertTrue(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      MimeMultipart mimeMultipart0 = multiPartEmail0.getContainer();
      // Undeclared exception!
      try { 
        multiPartEmail0.addPart(mimeMultipart0, (-837));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[2];
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      URL uRL1 = MockURL.URL(uRL0, "disabled", (URLStreamHandler) bytesURLStreamHandler0);
      URLDataSource uRLDataSource0 = new URLDataSource(uRL1);
      multiPartEmail0.attach((DataSource) uRLDataSource0, "disabled", "disabled");
      assertTrue(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      try { 
        multiPartEmail0.attach((DataSource) null, "Invalid attachment supplied", "inline");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid Datasource
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      URL uRL0 = MockURL.getHttpExample();
      URLDataSource uRLDataSource0 = new URLDataSource(uRL0);
      try { 
        multiPartEmail0.attach((DataSource) uRLDataSource0, "disabled", "disabled");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid Datasource
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      emailAttachment0.setPath("inline");
      try { 
        multiPartEmail0.attach(emailAttachment0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot attach file \"inline\"
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      byte[] byteArray0 = new byte[0];
      BytesURLStreamHandler bytesURLStreamHandler0 = new BytesURLStreamHandler(byteArray0);
      URL uRL0 = MockURL.URL("inline", (String) null, (-239), "inline", (URLStreamHandler) bytesURLStreamHandler0);
      emailAttachment0.setURL(uRL0);
      multiPartEmail0.attach(emailAttachment0);
      assertTrue(multiPartEmail0.isBoolHasAttachments());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      try { 
        multiPartEmail0.attach((EmailAttachment) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid attachment supplied
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      MockFile mockFile0 = new MockFile("inline");
      try { 
        multiPartEmail0.attach((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot attach file \"/Users/antonio/Documents/GitHub/commons-email-mod/inline\"
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.getPrimaryBodyPart();
      try { 
        multiPartEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      try { 
        multiPartEmail0.send();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.charset = "1/}I{";
      Email email0 = multiPartEmail0.setMsg("org.codehaus.classworlds.ClassWorldException");
      assertFalse(email0.isSendPartial());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      try { 
        multiPartEmail0.setMsg("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid message supplied
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      EmailAttachment emailAttachment0 = new EmailAttachment();
      multiPartEmail0.attach(emailAttachment0);
      // Undeclared exception!
      try { 
        multiPartEmail0.init();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already initialized
         //
         verifyException("org.apache.commons.mail.MultiPartEmail", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      boolean boolean0 = multiPartEmail0.isBoolHasAttachments();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      String string0 = multiPartEmail0.getSubType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      boolean boolean0 = multiPartEmail0.isInitialized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MultiPartEmail multiPartEmail0 = new MultiPartEmail();
      multiPartEmail0.setSubType("n");
      try { 
        multiPartEmail0.buildMimeMessage();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find valid hostname for mail session
         //
         verifyException("org.apache.commons.mail.Email", e);
      }
  }
}
