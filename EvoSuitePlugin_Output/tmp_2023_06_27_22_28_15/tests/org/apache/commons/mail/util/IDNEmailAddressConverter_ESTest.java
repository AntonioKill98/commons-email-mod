/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 27 20:46:32 GMT 2023
 */

package org.apache.commons.mail.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import javax.mail.internet.InternetAddress;
import org.apache.commons.mail.util.IDNEmailAddressConverter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IDNEmailAddressConverter_ESTest extends IDNEmailAddressConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      String string0 = iDNEmailAddressConverter0.toUnicode("@<sN9jmyPmH");
      assertEquals("@<sN9jmyPmH", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      String string0 = iDNEmailAddressConverter0.toASCII("@x7f");
      assertEquals("@x7f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      InternetAddress internetAddress0 = mock(InternetAddress.class, new ViolatedAssumptionAnswer());
      doReturn("").when(internetAddress0).getAddress();
      String string0 = iDNEmailAddressConverter0.toUnicode(internetAddress0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      String string0 = iDNEmailAddressConverter0.toUnicode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      String string0 = iDNEmailAddressConverter0.toASCII("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      String string0 = iDNEmailAddressConverter0.toUnicode((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      InternetAddress internetAddress0 = mock(InternetAddress.class, new ViolatedAssumptionAnswer());
      doReturn("[X}yvDXnoV%5&&").when(internetAddress0).getAddress();
      String string0 = iDNEmailAddressConverter0.toUnicode(internetAddress0);
      assertNotNull(string0);
      assertEquals("[X}yvDXnoV%5&&", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      String string0 = iDNEmailAddressConverter0.toUnicode((InternetAddress) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      String string0 = iDNEmailAddressConverter0.toASCII((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      String string0 = iDNEmailAddressConverter0.toASCII("F@f{L_0+~34%`u>@9");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IDNEmailAddressConverter iDNEmailAddressConverter0 = new IDNEmailAddressConverter();
      String string0 = iDNEmailAddressConverter0.toUnicode("F@f{L_0+~34%`u>@9");
      assertNotNull(string0);
  }
}
