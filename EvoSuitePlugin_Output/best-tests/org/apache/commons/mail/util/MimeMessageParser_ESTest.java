/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 27 20:32:29 GMT 2023
 */

package org.apache.commons.mail.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.internet.MimePart;
import org.apache.commons.mail.DefaultAuthenticator;
import org.apache.commons.mail.util.MimeMessageParser;
import org.apache.maven.model.Model;
import org.apache.maven.model.Notifier;
import org.apache.maven.project.DefaultProjectBuilderConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MimeMessageParser_ESTest extends MimeMessageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Notifier notifier0 = new Notifier();
      Properties properties0 = notifier0.getConfiguration();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("org.apache.commons.mail.util.MimeMessageParser", "");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      mimeMessage0.setSubject("nl\"p$pdF)F7g~CMW", "nl\"p$pdF)F7g~CMW");
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getSubject();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MimeMessage mimeMessage0 = new MimeMessage((Session) null, sequenceInputStream0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.parse();
      mimeMessageParser0.getPlainContent();
      assertTrue(mimeMessageParser0.hasPlainContent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser((MimeMessage) null);
      mimeMessageParser0.getMimeMessage();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("G}@a\"\"h", "G}@a\"\"h");
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      BodyPart[] bodyPartArray0 = new BodyPart[4];
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MimeBodyPart mimeBodyPart0 = new MimeBodyPart(byteArrayInputStream0);
      bodyPartArray0[0] = (BodyPart) mimeBodyPart0;
      bodyPartArray0[1] = (BodyPart) mimeBodyPart0;
      bodyPartArray0[2] = (BodyPart) mimeBodyPart0;
      bodyPartArray0[3] = (BodyPart) mimeBodyPart0;
      MimeMultipart mimeMultipart0 = new MimeMultipart("Missing 'role' element from load-on-start.", bodyPartArray0);
      mimeMessageParser0.createDataSource(mimeMultipart0, mimeBodyPart0);
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser((MimeMessage) null);
      try { 
        mimeMessageParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultProjectBuilderConfiguration defaultProjectBuilderConfiguration0 = new DefaultProjectBuilderConfiguration();
      Properties properties0 = defaultProjectBuilderConfiguration0.getExecutionProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator(")1C(w", ")1C(w");
      // Undeclared exception!
      try { 
        Session.getDefaultInstance(properties0, (Authenticator) defaultAuthenticator0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Access to default session denied
         //
         verifyException("javax.mail.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser((MimeMessage) null);
      try { 
        mimeMessageParser0.getTo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser((MimeMessage) null);
      try { 
        mimeMessageParser0.getSubject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser((MimeMessage) null);
      try { 
        mimeMessageParser0.getReplyTo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser((MimeMessage) null);
      try { 
        mimeMessageParser0.getFrom();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultProjectBuilderConfiguration defaultProjectBuilderConfiguration0 = new DefaultProjectBuilderConfiguration();
      Properties properties0 = defaultProjectBuilderConfiguration0.getExecutionProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("multipart/*", "multipart/*");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      // Undeclared exception!
      try { 
        mimeMessageParser0.getDataSourceName(mimeMessage0, (DataSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser((MimeMessage) null);
      try { 
        mimeMessageParser0.getCc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser((MimeMessage) null);
      try { 
        mimeMessageParser0.getBcc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser((MimeMessage) null);
      // Undeclared exception!
      try { 
        mimeMessageParser0.createDataSource((Multipart) null, (MimePart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.mail.util.MimeMessageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("", ">/][7!nG");
      // Undeclared exception!
      try { 
        Session.getDefaultInstance(properties0, (Authenticator) defaultAuthenticator0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Access to default session denied
         //
         verifyException("javax.mail.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultProjectBuilderConfiguration defaultProjectBuilderConfiguration0 = new DefaultProjectBuilderConfiguration();
      Properties properties0 = defaultProjectBuilderConfiguration0.getExecutionProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("gBfbfDl-myhz(o)O", "gBfbfDl-myhz(o)O");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      MimeMultipart mimeMultipart0 = new MimeMultipart("[<>]");
      MimeBodyPart mimeBodyPart0 = new MimeBodyPart();
      try { 
        mimeMessageParser0.parse((Multipart) mimeMultipart0, (MimePart) mimeBodyPart0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No MimeBodyPart content
         //
         verifyException("javax.mail.internet.MimePartDataSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getAttachmentList();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("x?/q", "x?/q");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      FileDataSource fileDataSource0 = new FileDataSource("multipart/*");
      String string0 = mimeMessageParser0.getDataSourceName((Part) null, fileDataSource0);
      assertFalse(mimeMessageParser0.isMultipart());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MimeMessage mimeMessage0 = new MimeMessage((Session) null, sequenceInputStream0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.parse();
      mimeMessageParser0.parse((Multipart) null, (MimePart) mimeMessage0);
      // Undeclared exception!
      try { 
        mimeMessageParser0.findAttachmentByName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      boolean boolean0 = mimeMessageParser0.hasAttachments();
      assertFalse(boolean0);
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MimeMessage mimeMessage0 = new MimeMessage((Session) null, sequenceInputStream0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      boolean boolean0 = mimeMessageParser0.hasHtmlContent();
      assertFalse(mimeMessageParser0.isMultipart());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MimeMessage mimeMessage0 = new MimeMessage((Session) null, sequenceInputStream0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.parse();
      boolean boolean0 = mimeMessageParser0.hasPlainContent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      boolean boolean0 = mimeMessageParser0.hasPlainContent();
      assertFalse(boolean0);
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MimeMessage mimeMessage0 = new MimeMessage((Session) null);
          MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
          mimeMessage0.setFrom();
          String string0 = mimeMessageParser0.getReplyTo();
          assertFalse(mimeMessageParser0.isMultipart());
          assertNotNull(string0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getReplyTo();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessage0.setFrom();
      String string0 = mimeMessageParser0.getFrom();
      assertNotNull(string0);
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("x?/q", "x?/q");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getFrom();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MimeMessage mimeMessage0 = new MimeMessage((Session) null, sequenceInputStream0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getBcc();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      DefaultAuthenticator defaultAuthenticator0 = new DefaultAuthenticator("x?/q", "x?/q");
      Session session0 = Session.getInstance(properties0, (Authenticator) defaultAuthenticator0);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getCc();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getTo();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getContentIds();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getSubject();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MimeMessage mimeMessage0 = new MimeMessage((Session) null, sequenceInputStream0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.parse();
      MimeBodyPart mimeBodyPart0 = new MimeBodyPart(sequenceInputStream0);
      MimeMultipart mimeMultipart0 = new MimeMultipart("");
      mimeMessageParser0.parse((Multipart) mimeMultipart0, (MimePart) mimeBodyPart0);
      mimeMessageParser0.findAttachmentByName("text/plain");
      assertTrue(mimeMessageParser0.hasAttachments());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getPlainContent();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      boolean boolean0 = mimeMessageParser0.isMultipart();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Model model0 = new Model();
      Properties properties0 = model0.getProperties();
      Session session0 = Session.getInstance(properties0, (Authenticator) null);
      MimeMessage mimeMessage0 = new MimeMessage(session0);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.findAttachmentByCid("SZ+RnRu`");
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getHtmlContent();
      assertFalse(mimeMessageParser0.isMultipart());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MimeMessage mimeMessage0 = new MimeMessage((Session) null);
      MimeMessageParser mimeMessageParser0 = new MimeMessageParser(mimeMessage0);
      mimeMessageParser0.getMimeMessage();
      assertFalse(mimeMessageParser0.isMultipart());
  }
}
